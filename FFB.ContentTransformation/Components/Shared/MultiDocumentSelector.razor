@using FFB.ContentTransformation.Data.Entities
@using FFB.ContentTransformation.Models
@using FFB.ContentTransformation.Services.AI.ContentGeneration
@inject ILogger<MultiDocumentSelector> Logger
@implements IDisposable

<div class="multi-document-selector">
    <h4>Sélection de documents</h4>

    <div class="documents-list">
        @if (Documents.Any())
        {
            <FluentDataGrid Items="@Documents.AsQueryable()" TGridItem="Document" class="documents-grid">
                <TemplateColumn Title="">
                    <FluentCheckbox @bind-Value="@context.IsSelected"
                        OnChange="@(() => ToggleDocumentSelection(context))" />
                </TemplateColumn>
                <PropertyColumn Title="Nom" Property="@(d => d.FileName)" />
                <PropertyColumn Title="Type" Property="@(d => d.FileType)" />
                <PropertyColumn Title="Taille" Property="@(d => FormatFileSize(d.FileSize))" />
                <TemplateColumn Title="Statut">
                    <div class="status-indicator @GetStatusClass(context)">
                        @GetProcessingStatus(context)
                    </div>
                </TemplateColumn>
            </FluentDataGrid>

            <div class="selection-confirmation mt-3">
                <FluentButton Appearance="Appearance.Accent" Disabled="@(!HasSelectedDocuments())"
                    OnClick="@ConfirmSelection">
                    Confirmer la sélection
                </FluentButton>
                <span class="selection-status ms-2">
                    @(HasSelectedDocuments()
                        ? $"{Model.SelectedDocumentIds.Count} document(s) sélectionné(s)"
                        : "Aucun document sélectionné")
                </span>
            </div>

            @if (HasProcessingDocuments)
            {
                <div class="auto-refresh-notice mt-2">
                    <FluentButton Appearance="Appearance.Lightweight" OnClick="@RefreshDocuments">
                        Rafraîchir l'état des documents
                    </FluentButton>
                </div>
            }
        }
        else
        {
            <p>Aucun document disponible. Veuillez charger des documents.</p>
        }
    </div>

    <div class="processing-options mt-4 @(ShowProcessingOptions ? "" : "d-none")">
        <h4>Options de traitement</h4>

        <div class="option-row">
            <span>Stratégie multi-documents:</span>
            <FluentRadioGroup TValue="MultiDocumentStrategy" Value="@Model.MultiDocStrategy"
                ValueChanged="@(v => UpdateMultiDocStrategy(v))">
                <FluentRadio Value="@MultiDocumentStrategy.Combine">Combiner tous les documents</FluentRadio>
                <FluentRadio Value="@MultiDocumentStrategy.ProcessSeparately">Traiter séparément puis combiner
                </FluentRadio>
                <FluentRadio Value="@MultiDocumentStrategy.SummarizeThenCombine">Résumer puis combiner</FluentRadio>
            </FluentRadioGroup>
        </div>

        <div class="option-row">
            <FluentCheckbox @bind-Value="@Model.UseChunking"
                Label="Découper automatiquement les documents volumineux" />
        </div>
    </div>
</div>

@code {
    [Parameter]
    public List<Document> Documents { get; set; } = new();

    [Parameter]
    public ContentDeclinationModel Model { get; set; } = new();

    [Parameter]
    public EventCallback OnSelectionChanged { get; set; }

    [Parameter]
    public EventCallback OnSelectionConfirmed { get; set; }

    [Parameter]
    public EventCallback OnRefresh { get; set; }

    private bool ShowProcessingOptions { get; set; } = false;
    private bool HasProcessingDocuments => Documents.Any(d => !d.ProcessingComplete &&
    string.IsNullOrEmpty(d.ProcessingError));
    private bool _isDisposed = false;

    protected override void OnInitialized()
    {
        try
        {
            // Synchronize document IsSelected state with Model.SelectedDocumentIds
            foreach (var doc in Documents)
            {
                doc.IsSelected = Model.SelectedDocumentIds.Contains(doc.Id);
            }

            // Show processing options if documents are already selected
            ShowProcessingOptions = Model.SelectedDocumentIds.Any();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in OnInitialized");
        }
    }

    /// <summary>
    /// Checks if there are any documents selected based on UI state
    /// </summary>
    private bool HasSelectedDocuments()
    {
        // First check the model's selected IDs list
        if (Model.SelectedDocumentIds.Any())
            return true;
            
        // Then check UI state as fallback
        return Documents.Any(d => d.IsSelected);
    }

    private async Task ToggleDocumentSelection(Document document)
    {
        try
        {
            Logger.LogDebug("Document selection toggled: ID {DocumentId}, IsSelected: {IsSelected}", 
                document.Id, document.IsSelected);

            if (document.IsSelected)
            {
                // Ensure ID is in the list
                if (!Model.SelectedDocumentIds.Contains(document.Id))
                {
                    Model.SelectedDocumentIds.Add(document.Id);
                    Logger.LogDebug("Added document ID {DocumentId} to selected documents", document.Id);
                }
            }
            else
            {
                // Remove from the list
                if (Model.SelectedDocumentIds.Contains(document.Id))
                {
                    Model.SelectedDocumentIds.Remove(document.Id);
                    Logger.LogDebug("Removed document ID {DocumentId} from selected documents", document.Id);
                }
            }

            // Update primary selected document for backward compatibility
            Model.SelectedDocumentId = Model.SelectedDocumentIds.FirstOrDefault();
            
            // Force UI update
            StateHasChanged();
            
            await OnSelectionChanged.InvokeAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error toggling document selection for document ID {DocumentId}", document.Id);
        }
    }

    private async Task ConfirmSelection()
    {
        // Ensure the model's SelectedDocumentIds is in sync with UI state
        SynchronizeSelectionState();
        
        if (Model.SelectedDocumentIds.Any())
        {
            ShowProcessingOptions = true;
            await OnSelectionConfirmed.InvokeAsync();
        }
    }
    
    /// <summary>
    /// Ensures Model.SelectedDocumentIds matches the UI selection state
    /// </summary>
    private void SynchronizeSelectionState()
    {
        try
        {
            // Clear existing selection
            Model.SelectedDocumentIds.Clear();
            
            // Add all selected document IDs from UI state
            foreach (var doc in Documents.Where(d => d.IsSelected))
            {
                Model.SelectedDocumentIds.Add(doc.Id);
            }
            
            // Update primary selected document
            Model.SelectedDocumentId = Model.SelectedDocumentIds.FirstOrDefault();
            
            Logger.LogDebug("Selection state synchronized. Selected document count: {Count}", 
                Model.SelectedDocumentIds.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error synchronizing selection state");
        }
    }

    private async Task RefreshDocuments()
    {
        if (_isDisposed)
            return;

        // Appeler l'événement de rafraîchissement
        await OnRefresh.InvokeAsync();
    }

    private async Task UpdateMultiDocStrategy(MultiDocumentStrategy strategy)
    {
        Model.MultiDocStrategy = strategy;
        await OnSelectionChanged.InvokeAsync();
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        int order = 0;
        double size = bytes;

        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }

        return $"{size:0.##} {sizes[order]}";
    }

    private string GetProcessingStatus(Document document)
    {
        if (!document.ProcessingComplete && string.IsNullOrEmpty(document.ProcessingError))
            return "En cours de traitement...";

        if (!string.IsNullOrEmpty(document.ProcessingError))
            return $"Erreur: {document.ProcessingError}";

        return "Prêt";
    }

    private string GetStatusClass(Document document)
    {
        if (!document.ProcessingComplete && string.IsNullOrEmpty(document.ProcessingError))
            return "status-processing";

        if (!string.IsNullOrEmpty(document.ProcessingError))
            return "status-error";

        return "status-ready";
    }

    public void Dispose()
    {
        _isDisposed = true;
    }
}

<style>
    .multi-document-selector {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .documents-grid {
        width: 100%;
        margin-top: 10px;
    }

    .processing-options {
        display: flex;
        flex-direction: column;
        gap: 10px;
        background-color: #f0f5ff;
        padding: 15px;
        border-radius: 5px;
    }

    .option-row {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .mt-3 {
        margin-top: 0.75rem;
    }

    .mt-4 {
        margin-top: 1rem;
    }

    .mt-2 {
        margin-top: 0.5rem;
    }

    .ms-2 {
        margin-left: 0.5rem;
    }

    .d-none {
        display: none;
    }

    .selection-confirmation {
        display: flex;
        align-items: center;
        margin-top: 1rem;
    }

    .selection-status {
        color: #666;
    }

    .status-indicator {
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.875rem;
    }

    .status-processing {
        background-color: #FFF4CD;
        color: #856404;
    }

    .status-error {
        background-color: #F8D7DA;
        color: #721C24;
    }

    .status-ready {
        background-color: #D4EDDA;
        color: #155724;
    }

    .auto-refresh-notice {
        margin-top: 0.75rem;
    }
</style>