@page "/document-search"

<PageTitle>Recherche corpus documentaire - FFB POC</PageTitle>

<h2>Recherche corpus documentaire</h2>
<p>Posez des questions sur votre corpus documentaire pour obtenir des réponses précises.</p>

<FluentDivider></FluentDivider>

<FluentCard>
    <div class="search-container">
        <div class="chat-messages" id="chat-messages">
            <div class="message system-message">
                <p>Bonjour, je suis votre assistant de recherche documentaire. Comment puis-je vous aider?</p>
            </div>
            
            @foreach (var message in ChatMessages)
            {
                <div class="message @(message.IsUser ? "user-message" : "bot-message")">
                    <p>@message.Text</p>
                </div>
            }
            
            @if (IsProcessing)
            {
                <div class="message bot-message">
                    <FluentProgressRing />
                </div>
            }
        </div>
        
        <div class="chat-input">
            <FluentTextField @bind-Value="@CurrentMessage" Placeholder="Tapez votre question ici..." style="flex-grow: 1;" @onkeydown="@HandleKeyDown" />
            <FluentButton OnClick="@SendMessage" Appearance="Appearance.Accent" Disabled="@(IsProcessing || string.IsNullOrWhiteSpace(CurrentMessage))">
                Envoyer
            </FluentButton>
        </div>
    </div>
</FluentCard>

@code {
    private List<ChatMessage> ChatMessages { get; set; } = new();
    private string CurrentMessage { get; set; } = string.Empty;
    private bool IsProcessing { get; set; } = false;
    
    private class ChatMessage
    {
        public string Text { get; set; } = string.Empty;
        public bool IsUser { get; set; }
    }
    
    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(CurrentMessage))
            return;
            
        var userMessage = new ChatMessage
        {
            Text = CurrentMessage,
            IsUser = true
        };
        
        ChatMessages.Add(userMessage);
        var userInput = CurrentMessage;
        CurrentMessage = string.Empty;
        IsProcessing = true;
        StateHasChanged();
        
        await Task.Delay(1500); // Simulate processing time
        
        var botResponse = GetSampleResponse(userInput);
        ChatMessages.Add(new ChatMessage
        {
            Text = botResponse,
            IsUser = false
        });
        
        IsProcessing = false;
        StateHasChanged();
        
        // Scroll to bottom after rendering
        await Task.Delay(100);
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "chat-messages");
    }
    
    private async void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(CurrentMessage) && !IsProcessing)
        {
           await SendMessage();
        }
    }
    
    private string GetSampleResponse(string userInput)
    {
        // For demo purposes, we provide some sample responses
        userInput = userInput.ToLower();
        
        if (userInput.Contains("projet") || userInput.Contains("poc") || userInput.Contains("cas d'usage"))
        {
            return "La FFB a identifié deux cas d'usage pour ce POC:\n\n1. Déclinaison de contenu: vulgariser, résumer et adapter des contenus vers un format spécifique.\n\n2. Recherche corpus documentaire: faciliter la recherche d'informations dans un ensemble de documents à l'aide d'un agent conversationnel.";
        }
        
        if (userInput.Contains("planning") || userInput.Contains("calendrier"))
        {
            return "Le planning du projet s'étend de fin mars à mi-mai 2025. La mise à disposition des deux prototypes est prévue pour mi-mai après une phase d'implémentation et de recette.";
        }
        
        if (userInput.Contains("budget") || userInput.Contains("coût") || userInput.Contains("prix"))
        {
            return "Le budget pour l'implémentation des deux cas d'usage est capé à 55 000 € HT. La facturation est réalisée au temps passé avec une facturation mensuelle, permettant une approche 'Stop and Go' sur les jalons du projet.";
        }
        
        if (userInput.Contains("technologies") || userInput.Contains("technique") || userInput.Contains("azure"))
        {
            return "L'environnement technique pour ce projet s'appuie sur les services Microsoft Azure, notamment:\n- Azure OpenAI pour les modèles d'IA générative\n- Azure Blob Storage pour le stockage\n- Azure PostgreSQL pour la base de données\n- Azure Document Intelligence pour l'extraction de texte\n- Azure Web Application pour l'interface utilisateur\n\nCes services sont hébergés sur les datacenters Azure en France, assurant une cohérence avec l'environnement Office 365 existant.";
        }
        
        return "Je n'ai pas trouvé d'information spécifique sur ce sujet dans le corpus documentaire. Pourriez-vous reformuler votre question ou me demander autre chose concernant le projet FFB-OnePoint?";
    }
    
    [Inject]
    private IJSRuntime JSRuntime { get; set; } = default!;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Add JavaScript function to scroll chat to bottom
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.scrollToBottom = function(elementId) {
                    const element = document.getElementById(elementId);
                    if (element) {
                        element.scrollTop = element.scrollHeight;
                    }
                }
            ");
        }
    }
}

<style>
    .search-container {
        display: flex;
        flex-direction: column;
        height: 70vh;
    }
    
    .chat-messages {
        flex-grow: 1;
        overflow-y: auto;
        padding: 20px;
        display: flex;
        flex-direction: column;
        gap: 15px;
    }
    
    .chat-input {
        display: flex;
        gap: 10px;
        padding: 15px;
        border-top: 1px solid #eaeaea;
    }
    
    .message {
        padding: 12px 16px;
        border-radius: 8px;
        max-width: 80%;
    }
    
    .message p {
        margin: 0;
    }
    
    .system-message {
        background-color: #f0f0f0;
        align-self: center;
        max-width: 90%;
    }
    
    .user-message {
        background-color: #0078d4;
        color: white;
        align-self: flex-end;
    }
    
    .bot-message {
        background-color: #f0f0f0;
        align-self: flex-start;
    }
</style>