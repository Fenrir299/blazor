@page "/content-declination"
@using FFB.ContentTransformation.Data.Entities
@using FFB.ContentTransformation.Models
@using FFB.ContentTransformation.Services.DocumentProcessing
@using FFB.ContentTransformation.Services.AI.ContentGeneration
@inject IDocumentProcessingService DocumentProcessingService
@inject IContentGenerationService ContentGenerationService
@rendermode Microsoft.AspNetCore.Components.Web.RenderMode.InteractiveServer
<PageTitle>D√©clinaison de contenu - FFB POC</PageTitle>

<h2>D√©clinaison de contenu</h2>
<p>Chargez un document et g√©n√©rez diff√©rents types de contenus adapt√©s √† vos besoins.</p>

<FluentDivider></FluentDivider>

<div class="content-declination-container">
    <div class="file-upload-section">
        <h3>1. Chargez votre document</h3>
        <FileUploader OnDocumentUploaded="HandleDocumentUploaded" />

        @if (Model.UploadedDocuments.Any())
        {
            <div class="mt-4">
                <h4>Documents charg√©s</h4>
                <FluentDataGrid Items="@Model.UploadedDocuments.AsQueryable()" TGridItem="Document">
                    <PropertyColumn Title="Nom" Property="@(d => d.FileName)" />
                    <PropertyColumn Title="Type" Property="@(d => d.FileType)" />
                    <PropertyColumn Title="Taille" Property="@(d => FormatFileSize(d.FileSize))" />
                    <PropertyColumn Title="Statut" Property="@(d => GetProcessingStatus(d))" />
                    <TemplateColumn Title="Actions">
                        <FluentButton OnClick="(e) => SelectDocument(context)"
                            Disabled="@(!context.ProcessingComplete || !string.IsNullOrEmpty(context.ProcessingError))">
                            S√©lectionner
                        </FluentButton>
                    </TemplateColumn>
                </FluentDataGrid>
            </div>
        }
    </div>

    @if (Model.SelectedDocument != null)
    {
        <div class="content-generation-section">
            <h3>2. Configurez la g√©n√©ration</h3>
            <ContentGenerationOptionsComponent Model="@Model" OnOptionsChanged="HandleOptionsChanged" />

            <div class="mt-4">
                <FluentButton Appearance="Appearance.Accent" OnClick="GenerateContent" Disabled="@Model.IsProcessing">
                    @if (Model.IsProcessing)
                    {
                        <FluentProgressRing />
                        <span class="ms-2">G√©n√©ration en cours...</span>
                    }
                    else
                    {
                        <span>G√©n√©rer le contenu</span>
                    }
                </FluentButton>
            </div>

            @if (!string.IsNullOrEmpty(Model.GeneratedContent))
            {
                <div class="mt-4">
                    <h3>3. Contenu g√©n√©r√©</h3>
                    <GeneratedContentDisplay Content="@Model.GeneratedContent" />
                </div>
            }

            @if (!string.IsNullOrEmpty(Model.ErrorMessage))
            {
                <FluentMessageBar Type="MessageType.Notification" class="mt-3">
                    @Model.ErrorMessage
                </FluentMessageBar>
            }
        </div>
    }
</div>

@code {
    private ContentDeclinationModel Model { get; set; } = new();

    protected override Task OnInitializedAsync()
    {
        return LoadDocumentsAsync();
    }
    private async Task LoadDocumentsAsync()
    {
        try
        {
            // For a POC, we'll use sample data
            // In a real application, this would fetch documents from the database
            Model.UploadedDocuments = new List<Document>
{
new()
{
Id = 1,
FileName = "FFB - OnePoint - Proposition commerciale 2025.03.21 V3.pdf",
FileType = "application/pdf",
FileSize = 250000,
UploadedAt = DateTime.Now.AddDays(-1),
ProcessingComplete = true,
StoragePath = "sample1.pdf"
},
new()
{
Id = 2,
FileName = "Composants IHM",
FileType = "text/plain",
FileSize = 5000,
UploadedAt = DateTime.Now.AddHours(-2),
ProcessingComplete = true,
StoragePath = "sample2.txt"
}
};
        }
        catch (Exception ex)
        {
            Model.ErrorMessage = $"Erreur lors du chargement des documents: {ex.Message}";
        }
    }

    private async Task HandleDocumentUploaded(Document document)
    {
        Model.UploadedDocuments.Add(document);
        StateHasChanged();
    }

    private void SelectDocument(Document document)
    {
        Model.SelectedDocumentId = document.Id;
        Model.ErrorMessage = null;
        Model.GeneratedContent = null;
        StateHasChanged();
    }

    private void HandleOptionsChanged()
    {
        // Reset generated content when options change
        Model.GeneratedContent = null;
        StateHasChanged();
    }

    private async Task GenerateContent()
    {
        if (Model.SelectedDocument == null)
        {
            Model.ErrorMessage = "Veuillez s√©lectionner un document.";
            return;
        }

        try
        {
            Model.IsProcessing = true;
            Model.ErrorMessage = null;
            StateHasChanged();

            var options = new ContentGenerationOptions
            {
                ContentType = Model.SelectedContentType,
                Format = Model.SelectedFormat,
                CustomPrompt = Model.CustomPrompt
            };

            // For POC purposes, we'll use mock data for certain document IDs
            if (Model.SelectedDocumentId == 1)
            {
                // Simulate generation for the proposal document
                await Task.Delay(2000); // Simulate processing time

                Model.GeneratedContent = GetSampleGeneratedContent(options);
            }
            else
            {
                // Real generation through the service for other documents
                Model.GeneratedContent = await ContentGenerationService.GenerateContentAsync(
                Model.SelectedDocument,
                options
                );
            }
        }
        catch (Exception ex)
        {
            Model.ErrorMessage = $"Erreur lors de la g√©n√©ration: {ex.Message}";
        }
        finally
        {
            Model.IsProcessing = false;
            StateHasChanged();
        }
    }

    private string GetSampleGeneratedContent(ContentGenerationOptions options)
    {
        // Sample content based on options for demo purposes
        if (options.ContentType == ContentType.WebArticle)
        {
            return @"# La FFB s'engage dans la r√©volution de l'IA g√©n√©rative

## Un partenariat prometteur avec OnePoint

La F√©d√©ration Fran√ßaise du B√¢timent (FFB) franchit une √©tape d√©cisive dans sa transformation num√©rique en s'associant
avec OnePoint pour explorer les potentialit√©s des intelligences artificielles g√©n√©ratives. Cette initiative s'articule
autour de deux cas d'usage concrets qui promettent d'am√©liorer significativement l'efficacit√© op√©rationnelle des
√©quipes.

## Deux cas d'usage innovants

Le premier prototype vise √† transformer des contenus techniques en formats adapt√©s √† diff√©rentes cibles. Qu'il s'agisse
de vulgariser des informations complexes ou de les reformater pour diff√©rents canaux de communication (articles web,
posts LinkedIn ou emails), cette solution permettra un gain de temps consid√©rable pour les √©quipes de communication.

Le second cas d'usage concerne la recherche intelligente dans un corpus documentaire. Gr√¢ce √† un agent conversationnel,
les collaborateurs pourront rapidement acc√©der aux informations pertinentes diss√©min√©es dans de nombreux documents.

## Une approche pragmatique

Le projet adopte une m√©thodologie agile avec une phase de prototypage rapide permettant d'√©valuer concr√®tement la valeur
ajout√©e de ces technologies avant d'envisager une industrialisation plus large.

Cette d√©marche innovante illustre la volont√© de la FFB de conjuguer expertise m√©tier et technologies de pointe pour
mieux servir ses adh√©rents et optimiser ses processus internes.";
        }
        else if (options.ContentType == ContentType.LinkedInPost)
        {
            return @"Fi√®re d'annoncer notre collaboration avec OnePoint pour int√©grer l'IA g√©n√©rative dans nos processus ! üöÄ

Nous lan√ßons deux prototypes innovants :
‚úÖ Un outil de transformation de contenus qui adapte automatiquement nos documents techniques pour diff√©rents formats et
audiences
‚úÖ Un assistant de recherche intelligent pour exploiter efficacement notre base documentaire

Cette initiative s'inscrit dans notre strat√©gie de transformation digitale pour gagner en efficacit√© op√©rationnelle et
mieux servir nos adh√©rents.

Premiers r√©sultats attendus en mai 2025. Restez connect√©s !

#Innovation #IntelligenceArtificielle #B√¢timent #Digitalisation #TransformationNum√©rique";
        }
        else // Email
        {
            return @"Objet : Lancement de notre projet d'IA g√©n√©rative avec OnePoint

Chers collaborateurs,

J'ai le plaisir de vous annoncer le lancement de notre projet d'exp√©rimentation des technologies d'intelligence
artificielle g√©n√©rative, en partenariat avec le cabinet OnePoint.

Notre f√©d√©ration s'engage ainsi dans une d√©marche innovante visant √† simplifier notre quotidien et √† gagner en
efficacit√© op√©rationnelle. Deux cas d'usage ont √©t√© identifi√©s pour cette phase pilote :

1. La d√©clinaison automatique de contenus : ce prototype nous permettra de vulgariser, r√©sumer et adapter nos documents
techniques vers diff√©rents formats (articles web, posts LinkedIn, emails) en fonction des audiences cibl√©es.

2. La recherche intelligente dans notre corpus documentaire : un agent conversationnel nous aidera √† localiser
rapidement les informations pertinentes au sein de notre base documentaire.

Le planning pr√©voit un d√©ploiement progressif sur les mois d'avril et mai 2025, avec une premi√®re mise √† disposition des
outils pr√©vue mi-mai.

Je vous invite √† partager vos questions ou suggestions concernant ce projet aupr√®s de l'√©quipe digitale.

Cordialement,

La Direction";
        }
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        int order = 0;
        double size = bytes;

        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }

        return $"{size:0.##} {sizes[order]}";
    }

    private string GetProcessingStatus(Document document)
    {
        if (!document.ProcessingComplete && string.IsNullOrEmpty(document.ProcessingError))
            return "En cours de traitement...";

        if (!string.IsNullOrEmpty(document.ProcessingError))
            return $"Erreur: {document.ProcessingError}";

        return "Pr√™t";
    }

}


<style>
    .content-declination-container {
        display: flex;
        flex-direction: column;
        gap: 30px;
    }

    .file-upload-section,
    .content-generation-section {
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 5px;
    }

    .mt-4 {
        margin-top: 1rem;
    }

    .ms-2 {
        margin-left: 0.5rem;
    }
</style>
